<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.yin.mapper.SongMapper">
    <resultMap id="BaseResultMap" type="com.example.yin.model.domain.Song">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="system_id" property="systemId" jdbcType="INTEGER"/>
        <result column="level_one_id" property="levelOneId" jdbcType="INTEGER"/>
        <result column="state" property="state" jdbcType="INTEGER"/>
        <result column="support_language" property="supportLanguage" jdbcType="VARCHAR"/>
        <result column="song_number" property="songNumber" jdbcType="INTEGER"/>
        <result column="id" property="songUid" jdbcType="INTEGER"/>
        <result column="name" property="songName" jdbcType="VARCHAR"/>
        <result column="url" property="url" jdbcType="VARCHAR"/>
        <!--        <collection property="songInformation" ofType="com.example.yin.model.domain.SongInformation">-->
        <!--            <id column="id" property="songUid" jdbcType="INTEGER"/>-->
        <!--            <result column="desc" property="desc" jdbcType="VARCHAR"/>-->
        <!--            <result column="author" property="author" jdbcType="VARCHAR"/>-->
        <!--            <result column="release_time" property="releaseTime" jdbcType="VARCHAR"/>-->
        <!--            <result column="theme" property="theme" jdbcType="VARCHAR"/>-->
        <!--            <result column="music_cover" property="musicCover" jdbcType="VARCHAR"/>-->
        <!--            <result column="language" property="language" jdbcType="INTEGER"/>-->
        <!--            <result column="backstory" property="backstory" jdbcType="VARCHAR"/>-->
        <!--            <result column="url" property="url" jdbcType="VARCHAR"/>-->
        <!--            <result column="name" property="songName" jdbcType="VARCHAR"/>-->
        <!--            <result column="lyric" property="lyric" jdbcType="VARCHAR"/>-->
        <!--        </collection>-->
    </resultMap>
    <resultMap id="ListResultMap" type="com.example.yin.model.domain.Song">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="system_id" property="systemId" jdbcType="INTEGER"/>
        <result column="level_one_id" property="levelOneId" jdbcType="INTEGER"/>
        <result column="state" property="state" jdbcType="INTEGER"/>
        <result column="support_language" property="supportLanguage" jdbcType="VARCHAR"/>
        <result column="song_number" property="songNumber" jdbcType="INTEGER"/>
        <result column="id" property="songUid" jdbcType="INTEGER"/>
        <result column="name" property="songName" jdbcType="VARCHAR"/>
        <result column="url" property="url" jdbcType="VARCHAR"/>
        <!--        <collection property="songInformation" ofType="com.example.yin.model.domain.musicCover">-->
        <!--            <id column="id" property="songUid" jdbcType="INTEGER"/>-->
        <!--            <result column="music_cover" property="musicCover" jdbcType="VARCHAR"/>-->
        <!--            <result column="recommend" property="recommend" jdbcType="INTEGER"/>-->
        <!--            <result column="hot" property="hot" jdbcType="INTEGER"/>-->
        <!--        </collection>-->
    </resultMap>

    <select id="selectSong" resultMap="ListResultMap">
        SELECT s.id,
               s.system_id,
               s.level_one_id,
               s.state,
               s.support_language,
               s.song_number,
               si.id,
               si.name
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
    </select>

    <select id="selectSongsByLevelOneId" resultMap="ListResultMap">
        SELECT s.id,
               s.system_id,
               s.level_one_id,
               s.state,
               s.support_language,
               s.song_number,
               si.id,
               si.name
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
        WHERE s.level_one_id = #{levelOneId} LIMIT #{offset}
            , #{limit}
    </select>


    <select id="countTotalSongsByLevelOneId" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
        WHERE s.level_one_id = #{levelOneId}
    </select>


    <select id="selectAllSongs" resultMap="ListResultMap">
        SELECT s.id,
               s.system_id,
               s.level_one_id,
               s.state,
               s.support_language,
               s.song_number,
               si.id,
               si.name
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
            LIMIT #{offset}
           , #{limit}
    </select>

    <select id="countAllSongs" resultType="int">
        SELECT COUNT(*)
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
    </select>

    <select id="selectSongsByLevelOneIdAndSongUid" resultMap="ListResultMap">
        SELECT s.id,
               s.system_id,
               s.level_one_id,
               s.state,
               s.support_language,
               s.song_number,
               si.id,
               si.name
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
        WHERE s.level_one_id = #{levelOneId}
          AND s.song_number = #{songNumber}
    </select>

    <select id="countTotalSongsByLevelOneIdAndSongUid" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
        WHERE s.level_one_id = #{levelOneId}
          AND s.song_number = #{songNumber}
    </select>

    <select id="selectSongsByLevelOneIdAndKeyword" resultMap="ListResultMap">
        SELECT s.id,
               s.system_id,
               s.level_one_id,
               s.state,
               s.support_language,
               s.song_number,
               si.id,
               si.name
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
        WHERE s.level_one_id = #{levelOneId}
          AND (si.name LIKE CONCAT('%', #{keyword}, '%'))
    </select>

    <select id="countTotalSongsByLevelOneIdAndKeyword" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
        WHERE s.level_one_id = #{levelOneId}
          AND (si.name LIKE CONCAT('%', #{keyword}, '%'))
    </select>

    <select id="searchSongs" resultMap="ListResultMap">
        SELECT s.id,
               s.system_id,
               s.level_one_id,
               s.state,
               s.support_language,
               s.song_number,
               si.id,
               si.name
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
            AND (si.name LIKE CONCAT('%', #{keyword}, '%') OR s.id LIKE CONCAT('%', #{keyword}, '%'))
        WHERE s.id IS NOT NULL
            LIMIT #{offset}
            , #{pageSize}
    </select>

    <select id="selectSongById" resultMap="BaseResultMap" parameterType="integer">
        SELECT s.id,
               s.system_id,
               s.level_one_id,
               s.state,
               s.support_language,
               s.song_number,
               si.name,
               si.url,
               si.id,
               si.desc,
               si.author,
               si.release_time,
               si.theme,
               si.music_cover,
               si.language,
               si.backstory,
               si.lyric
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
        WHERE s.id = #{id}
    </select>

    <select id="findBySongUid" resultType="com.example.yin.model.domain.Song">
        SELECT *
        FROM m_song
        WHERE id = #{songUid}
    </select>

    <select id="findFirstNineSongs" resultMap="ListResultMap">
        SELECT s.id,
               s.system_id,
               s.level_one_id,
               s.state,
               s.support_language,
               s.song_number,
               si.id,
               si.name,
               si.hot
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
        WHERE si.hot = 1 LIMIT 9
    </select>

    <select id="findFirstNineSongs1" resultMap="ListResultMap">
        SELECT s.id,
               s.system_id,
               s.level_one_id,
               s.state,
               s.support_language,
               s.song_number,
               si.id,
               si.name,
               si.recommend
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
        WHERE si.recommend = 1 LIMIT 12
    </select>

    <select id="selectUrlById" resultMap="ListResultMap" parameterType="integer">
        SELECT s.id,
               s.system_id,
               s.level_one_id,
               s.state,
               s.support_language,
               s.song_number,
               si.song_id,
               si.name,
               si.url
        FROM m_song_information si
                 LEFT JOIN m_song s ON s.id = si.song_id
        WHERE s.id = #{id}
    </select>

    <select id="findByUrlUid" resultType="com.example.yin.model.domain.Song">
        SELECT s.id
        FROM m_song s
        WHERE id = #{songUid}
    </select>
</mapper>
